---
// import '../styles/global.css';
import { isObject } from '@utils';
import ChildElementInjected from '@components/ChildElementInjected.astro';
import Anon from '@components/Anon.jsx';
// import { log } from 'handlebars'

const {
	path,
	subBlocks,
	style = '',
	head: headChildrenRaw = [], // Can be string, object (as component description) or an array of former types
	body: bodyChildrenRaw = [], // Can be string, object (as component description) or an array of former types
	metadata,
	// components,
} = Astro.props || {};
const {
	lang = 'en',
	dir = 'ltr',
	siteName,
	title,
	description,
	canonicalUrl,
	meta, // An array of objects with properties corresponding to <meta> attributes
	link, // An array of objects with properties corresponding to <link> attributes
	...restMetadataRaw
} = metadata || {};
const { html: propsHtml = {}, head: propsHead = {}, body: propsBody = {} } = subBlocks || {};

// Transform something like
// const obj = { ogType: {tag: 'meta', property: "og:type", content: 'website'} }
// to
// const arr = [ {'data-key': 'ogType', tag: 'meta', property: "og:type", content: 'website'} ]
// MUST have a 'tag' prop
const mapToArrayOfComps = (obj, errName) => {
	// Returns an array of strings OR objects (as component descriptions)
	let arr = [];

	if (typeof obj === 'undefined') return [];
	else if (Array.isArray(obj)) arr = obj;
	else if (typeof obj === 'string') arr = [obj];
	else if (isObject(obj) && obj.tag) arr = [obj];
	else if (isObject(obj)) {
		arr = Object.entries(obj).map(([key, val]) => {
			if (typeof val === 'object') {
				return { ['data-key']: key, ...val };
			}
			return val;
		});
	} else {
		console.error(
			`Error in ${errName} prop on page ${path}.\n`,
			`${JSON.stringify(obj)} is not an (array of) object(s) or string(s).`
		);

		return obj;
	}
	arr = arr
		.map((el) => {
			if (typeof el === 'object' && !el?.tag) {
				console.error(`Exported element with key '${el['data-key']}' has no 'tag' property`);
				return null;
			}
			return el;
		})
		.filter((z) => z);

	return arr;
};

const titleComposed = title ? `${title}${siteName ? ` | ${siteName}` : ''}` : siteName;
const restMetadata = mapToArrayOfComps(restMetadataRaw, 'rest of metadata');
const headChildren = mapToArrayOfComps(headChildrenRaw, 'head');
const bodyChildren = mapToArrayOfComps(bodyChildrenRaw, 'body');

// console.log({ restMetadata, headChildren, bodyChildren })
// "metadata": {
//       "title": "This blog is monumental",
//       "ogType": {
//         "tag": "meta",
//         "property": "og:type",
//         "content": "website"
//       },
//       "link": [
//         {
//           "rel": "canonical",
//           "href": "https://www.poko.site/blog"
//         },
//         {
//           "rel": "icon",
//           "type": "image/png",
//           "sizes": "32x32",
//           "href": "/favicon.png"
//         }
//       ]
//     }
---

<html {lang} {dir} {...propsHtml}>
	<head {...propsHead}>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		{titleComposed && <title>{titleComposed}</title>}
		{titleComposed && <meta property="og:title" content={titleComposed} />}
		{description && <meta name="description" content={description} />}
		{description && <meta property="og:description" content={description} />}
		{canonicalUrl && <link rel="canonical" href={canonicalUrl} />}
		{canonicalUrl && <meta property="og:url" content={canonicalUrl} />}
		{Array.isArray(meta) && meta.map((el) => <meta {...el} />)}
		{Array.isArray(link) && link.map((el) => <link {...el} />)}
		{restMetadata.map((child) => <ChildElementInjected {child} />)}

		<slot name="headString" />

		<!-- Important to put user-css after head insert because we could import css libraries and need to overwrite them -->
		<link rel="stylesheet" href="/user-styles.css" />
		<style class="style-page" type="text/css" set:html={style}></style>

		{headChildren.map((child) => <ChildElementInjected {child} />)}
		<slot name="head" />
	</head>

	<body {...propsBody}>
		<slot name="body-top" />
		<slot />
		<slot name="body" />

		{bodyChildren.map((child) => <ChildElementInjected {child} />)}

		<!-- Do I need to use <Anon /> instead of <ChildElementInjected /> ?? -->
		<!-- {bodyChildren.map((child) => {
      if (isObject(child)) return <Anon {...child}>{child.children}</Anon>;
      else if (typeof child === 'string') return <Fragment set:html={child} />;
      else return null;
    })} -->

		<!-- <script src="/assets/js/instant.page.js" defer type="module"></script> -->
		<slot name="body-bottom" />
	</body>
</html>
