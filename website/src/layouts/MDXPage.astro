---
// import Debug from 'astro/debug';
// import { notionHelpers } from "@utils";
import { SkeletonPage } from "@layouts";
// import pokoComponents, { addProps } from "../components/components.jsx";
// import { toMdx } from '@services/notion.mjs'
import MDXBundler from "../components/MDXBundler.jsx";
import { bundleMDX } from "mdx-bundler";
// import { getMDXExport } from "mdx-bundler/client/index.js";
// import { MDXRemote } from "next-mdx-remote";
import { mdxConfigForPages } from '@services/poko.mjs'

const { href: canonicalUrl, pathname } = new URL(Astro.url.pathname, Astro.site);
const {
  // _page, _pages,
  md,
  selfProps,
  componentsFromPages, tree, globalStylesString, headString
} = Astro.props;

selfProps.poko.page.pathname = pathname
selfProps.poko.page.canonicalUrl = canonicalUrl

    // const { md, props } = _page;

// const mdx = md
//   ? await bundleMDX({source: md, ...mdxConfigForPages})
//   : { code: undefined };
const mdx = await bundleMDX({source: md, ...mdxConfigForPages})
const { code } = mdx

// const dataForComponents = { _pages, _self: { pathname, canonicalUrl } }


// console.log(props.components)

---

<SkeletonPage {...{ path: pathname, ...selfProps.poko.page, ...selfProps.page }}>
  <Fragment slot="head" set:html={headString} />

  <!-- {code ? <MDXBundler {...{ code, frontmatter: undefined, props, dataForComponents }} /> : null} -->
  <MDXBundler {...{ code, frontmatter: undefined, selfProps, componentsFromPages }} />
</SkeletonPage>
